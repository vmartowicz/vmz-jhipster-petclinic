package fr.vmz.jhipster.petclinic.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVetAllPropertiesEquals(Vet expected, Vet actual) {
        assertVetAutoGeneratedPropertiesEquals(expected, actual);
        assertVetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVetAllUpdatablePropertiesEquals(Vet expected, Vet actual) {
        assertVetUpdatableFieldsEquals(expected, actual);
        assertVetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVetAutoGeneratedPropertiesEquals(Vet expected, Vet actual) {
        assertThat(expected)
            .as("Verify Vet auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVetUpdatableFieldsEquals(Vet expected, Vet actual) {
        assertThat(expected)
            .as("Verify Vet relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVetUpdatableRelationshipsEquals(Vet expected, Vet actual) {
        assertThat(expected)
            .as("Verify Vet relationships")
            .satisfies(e -> assertThat(e.getSpecialties()).as("check specialties").isEqualTo(actual.getSpecialties()));
    }
}
